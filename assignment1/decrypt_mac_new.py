
ciphertxt="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"
b64map=['000000','000001','000010','000011','000100','000101','000110','000111','001000','001001','001010','001011','001100','001101','001110','001111','010000','010001','010010','010011','010100','010101','010110','010111','011000','011001','011010','011011','011100','011101','011110','011111','100000','100001','100010','100011','100100','100101','100110','100111','101000','101001','101010','101011','101100','101101','101110','101111','110000','110001','110010','110011','110100','110101','110110','110111','111000','111001','111010','111011','111100','111101','111110','111111']
base64alphabet=[ 'A', 'B', 'C', 'D' , 'E', 'F', 'G' , 'H','I','J', 'K' , 'L', 'M' , 'N', 'O' ,'P', 'Q' , 'R','S', 'T', 'U', 'V', 'W' , 'X', 'Y', 'Z',
'a','b','c','d','e','f','g','h','i','j','k','l', 'm' ,'n','o','p','q','r','s','t','u','v', 'w','x','y','z',
'0','1','2','3','4','5','6','7','8','9', '+' ,'/']

#pad on the right with two bits 
def check_right_most(sixbit):
    bytes = [(sixbit+"00"), (sixbit+"01"),(sixbit+"10"),(sixbit+"11")]
    for byte in bytes :
       ascii_num=int(byte,2)
       if ((92 > ascii_num > 64) or (96 < ascii_num < 123)) : 
           print(base64alphabet[b64map.index(sixbit)],': might be a ',chr(ascii_num))

def check_left_most(sixbit):
    bytes = [("00"+sixbit), ("01"+sixbit),("10"+sixbit),("11"+sixbit)]
    for byte in bytes :
       ascii_num=int(byte,2)
       if (92 > ascii_num > 64) or (96 < ascii_num < 123) : 
           print(base64alphabet[b64map.index(sixbit)],': might be a ',chr(ascii_num))

def is_space(sixbit):
    bytes = [("00"+sixbit), ("01"+sixbit),("10"+sixbit),("11"+sixbit),(sixbit+"00"), (sixbit+"01"),(sixbit+"10"),(sixbit+"11")]
    

cipher_bits=[]
for c in ciphertxt:
   if c != '=': 
     cipher_bits.append(b64map[base64alphabet.index(c)])

print(cipher_bits) 



for sixbit in cipher_bits: 
    is_space(sixbit)
    check_right_most(sixbit)
    check_left_most(sixbit)
    



    
